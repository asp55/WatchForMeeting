[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "def" : "WatchForMeeting.logger",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "name" : "logger",
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.sharing",
        "stripped_doc" : [
          "A Table containing the settings that control sharing.",
          "",
          "- enabled",
          "-- Whether or not sharing is enabled. True by default. When disabled, the spoon will still monitor meeting status, but you will need to write your own automations for what to do with that info. ",
          "- useServer",
          "-- *true* - (recommended) an external server will store the meeting status and provide the web interface for monitoring meeting status. (Node.js sample server can be found at [https:\/\/github.com\/asp55\/MeetingStatusServer](https:\/\/github.com\/asp55\/MeetingStatusServer))",
          "-- *false* - hammerspoon will self serve the monitoring page. (Due to a limitation in hs.httpserver:websocket the monitoring page will only update in the last client to connect.) ",
          "- port",
          "-- What port to run the self hosted server when WatchForMeeting.sharing.useServer is false. (Defaults to 8080)",
          "-- Ignored if WatchForMeeting.sharing.useServer is true.",
          "- serverURL",
          "-- The complete url for the external server. (including port)",
          "-- Required when WatchForMeeting.sharing.useServer is *true*",
          "- key",
          "-- UUID to identify the room. Value is provided when the room is added on the server side. ",
          "-- Required when WatchForMeeting.sharing.useServer is *true*",
          "- maxConnectionAttempts",
          "-- Maximum number of connection attempts when using an external server.",
          "- waitBeforeRetry",
          "-- Time, in seconds, between connection attempts when using an external server"
        ],
        "name" : "sharing",
        "doc" : "A Table containing the settings that control sharing.\n\n- enabled\n-- Whether or not sharing is enabled. True by default. When disabled, the spoon will still monitor meeting status, but you will need to write your own automations for what to do with that info. \n- useServer\n-- *true* - (recommended) an external server will store the meeting status and provide the web interface for monitoring meeting status. (Node.js sample server can be found at [https:\/\/github.com\/asp55\/MeetingStatusServer](https:\/\/github.com\/asp55\/MeetingStatusServer))\n-- *false* - hammerspoon will self serve the monitoring page. (Due to a limitation in hs.httpserver:websocket the monitoring page will only update in the last client to connect.) \n- port\n-- What port to run the self hosted server when WatchForMeeting.sharing.useServer is false. (Defaults to 8080)\n-- Ignored if WatchForMeeting.sharing.useServer is true.\n- serverURL\n-- The complete url for the external server. (including port)\n-- Required when WatchForMeeting.sharing.useServer is *true*\n- key\n-- UUID to identify the room. Value is provided when the room is added on the server side. \n-- Required when WatchForMeeting.sharing.useServer is *true*\n- maxConnectionAttempts\n-- Maximum number of connection attempts when using an external server.\n- waitBeforeRetry\n-- Time, in seconds, between connection attempts when using an external server",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.sharing",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "A Table containing the settings that control sharing.",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.menubar",
        "stripped_doc" : [
          "Boolean whether or not to show the menubar item",
          "A Table containing the settings that control sharing.",
          "",
          "- enabled",
          "-- Whether or not to show the menu bar. True by default. ",
          "- color",
          "-- Whether or not to use color icons. True by default.",
          "- detailed",
          "-- Whether or not to use the detailed icon set. True by default.",
          "-- *true* - Menu icon will spell out \"Free\" vs \"Meeting\" and will be sized accordingly",
          "-- *false* - Menu icon will remain a fixed size",
          "- showFullState",
          "-- Whether the menubar icon should represent the full state (Mic On\/Off, Video On\/Off, Screen Sharing) or just whether or not you're currently in a meeting. True by default."
        ],
        "name" : "menubar",
        "doc" : "Boolean whether or not to show the menubar item\nA Table containing the settings that control sharing.\n\n- enabled\n-- Whether or not to show the menu bar. True by default. \n- color\n-- Whether or not to use color icons. True by default.\n- detailed\n-- Whether or not to use the detailed icon set. True by default.\n-- *true* - Menu icon will spell out \"Free\" vs \"Meeting\" and will be sized accordingly\n-- *false* - Menu icon will remain a fixed size\n- showFullState\n-- Whether the menubar icon should represent the full state (Mic On\/Off, Video On\/Off, Screen Sharing) or just whether or not you're currently in a meeting. True by default.",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.menubar",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Boolean whether or not to show the menubar item",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.mode",
        "stripped_doc" : [
          "Number representing which mode WatchForMeeting should be running",
          "",
          "- *0* - Automatic (default)",
          "-- Monitors Zoom and updates status accordingly",
          "- *1* - Busy",
          "-- Fakes a meeting. (Marks as in meeting, and signals that the mic is live, camera is on, and screen is sharing.) Useful when meeting type is not supported (Currently any platform that isn't zoom.)"
        ],
        "name" : "mode",
        "doc" : "Number representing which mode WatchForMeeting should be running\n\n- *0* - Automatic (default)\n-- Monitors Zoom and updates status accordingly\n- *1* - Busy\n-- Fakes a meeting. (Marks as in meeting, and signals that the mic is live, camera is on, and screen is sharing.) Useful when meeting type is not supported (Currently any platform that isn't zoom.)",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.mode",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Number representing which mode WatchForMeeting should be running",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.zoom",
        "stripped_doc" : [
          "(Read-only) The hs.application for zoom if it is running, otherwise nil"
        ],
        "name" : "zoom",
        "doc" : "(Read-only) The hs.application for zoom if it is running, otherwise nil",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.zoom",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "(Read-only) The hs.application for zoom if it is running, otherwise nil",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.meetingState",
        "stripped_doc" : [
          "(Read-only) Either false (when not in a meeting) or a table (when in a meeting)",
          "",
          "When in a meeting, table will have the following keys with boolean values:",
          "- mic_open ",
          "- video_on ",
          "- sharing"
        ],
        "name" : "meetingState",
        "doc" : "(Read-only) Either false (when not in a meeting) or a table (when in a meeting)\n\nWhen in a meeting, table will have the following keys with boolean values:\n- mic_open \n- video_on \n- sharing",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.meetingState",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "(Read-only) Either false (when not in a meeting) or a table (when in a meeting)",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "A module that monitors whether or not you are in a meeting and optionally shares that information on a webpage you can run elsewhere.",
    "type" : "Module",
    "Constructor" : [

    ],
    "Field" : [

    ],
    "Method" : [
      {
        "def" : "WatchForMeeting:start()",
        "stripped_doc" : [
          "Starts a WatchForMeeting object",
          ""
        ],
        "name" : "start",
        "doc" : "Starts a WatchForMeeting object\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:start()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Starts a WatchForMeeting object",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:stop()",
        "stripped_doc" : [
          "Stops a WatchForMeeting object",
          ""
        ],
        "name" : "stop",
        "doc" : "Stops a WatchForMeeting object\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:stop()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Stops a WatchForMeeting object",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:start()",
        "stripped_doc" : [
          "Restarts a WatchForMeeting object",
          ""
        ],
        "name" : "start",
        "doc" : "Restarts a WatchForMeeting object\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:start()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Restarts a WatchForMeeting object",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:auto()",
        "stripped_doc" : [
          "Monitors Zoom and updates status accordingly",
          ""
        ],
        "name" : "auto",
        "doc" : "Monitors Zoom and updates status accordingly\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:auto()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Monitors Zoom and updates status accordingly",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:fake()",
        "stripped_doc" : [
          "Disables monitoring and reports as being in a meeting. ",
          "Useful when meeting type is not supported (currently any platform that isn't zoom.)",
          ""
        ],
        "name" : "fake",
        "doc" : "Disables monitoring and reports as being in a meeting. \nUseful when meeting type is not supported (currently any platform that isn't zoom.)\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:fake()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Disables monitoring and reports as being in a meeting.",
        "parameters" : [
          "- None",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "def" : "WatchForMeeting.logger",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "name" : "logger",
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.meetingState",
        "stripped_doc" : [
          "(Read-only) Either false (when not in a meeting) or a table (when in a meeting)",
          "",
          "When in a meeting, table will have the following keys with boolean values:",
          "- mic_open ",
          "- video_on ",
          "- sharing"
        ],
        "name" : "meetingState",
        "doc" : "(Read-only) Either false (when not in a meeting) or a table (when in a meeting)\n\nWhen in a meeting, table will have the following keys with boolean values:\n- mic_open \n- video_on \n- sharing",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.meetingState",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "(Read-only) Either false (when not in a meeting) or a table (when in a meeting)",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.menubar",
        "stripped_doc" : [
          "Boolean whether or not to show the menubar item",
          "A Table containing the settings that control sharing.",
          "",
          "- enabled",
          "-- Whether or not to show the menu bar. True by default. ",
          "- color",
          "-- Whether or not to use color icons. True by default.",
          "- detailed",
          "-- Whether or not to use the detailed icon set. True by default.",
          "-- *true* - Menu icon will spell out \"Free\" vs \"Meeting\" and will be sized accordingly",
          "-- *false* - Menu icon will remain a fixed size",
          "- showFullState",
          "-- Whether the menubar icon should represent the full state (Mic On\/Off, Video On\/Off, Screen Sharing) or just whether or not you're currently in a meeting. True by default."
        ],
        "name" : "menubar",
        "doc" : "Boolean whether or not to show the menubar item\nA Table containing the settings that control sharing.\n\n- enabled\n-- Whether or not to show the menu bar. True by default. \n- color\n-- Whether or not to use color icons. True by default.\n- detailed\n-- Whether or not to use the detailed icon set. True by default.\n-- *true* - Menu icon will spell out \"Free\" vs \"Meeting\" and will be sized accordingly\n-- *false* - Menu icon will remain a fixed size\n- showFullState\n-- Whether the menubar icon should represent the full state (Mic On\/Off, Video On\/Off, Screen Sharing) or just whether or not you're currently in a meeting. True by default.",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.menubar",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Boolean whether or not to show the menubar item",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.mode",
        "stripped_doc" : [
          "Number representing which mode WatchForMeeting should be running",
          "",
          "- *0* - Automatic (default)",
          "-- Monitors Zoom and updates status accordingly",
          "- *1* - Busy",
          "-- Fakes a meeting. (Marks as in meeting, and signals that the mic is live, camera is on, and screen is sharing.) Useful when meeting type is not supported (Currently any platform that isn't zoom.)"
        ],
        "name" : "mode",
        "doc" : "Number representing which mode WatchForMeeting should be running\n\n- *0* - Automatic (default)\n-- Monitors Zoom and updates status accordingly\n- *1* - Busy\n-- Fakes a meeting. (Marks as in meeting, and signals that the mic is live, camera is on, and screen is sharing.) Useful when meeting type is not supported (Currently any platform that isn't zoom.)",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.mode",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Number representing which mode WatchForMeeting should be running",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.sharing",
        "stripped_doc" : [
          "A Table containing the settings that control sharing.",
          "",
          "- enabled",
          "-- Whether or not sharing is enabled. True by default. When disabled, the spoon will still monitor meeting status, but you will need to write your own automations for what to do with that info. ",
          "- useServer",
          "-- *true* - (recommended) an external server will store the meeting status and provide the web interface for monitoring meeting status. (Node.js sample server can be found at [https:\/\/github.com\/asp55\/MeetingStatusServer](https:\/\/github.com\/asp55\/MeetingStatusServer))",
          "-- *false* - hammerspoon will self serve the monitoring page. (Due to a limitation in hs.httpserver:websocket the monitoring page will only update in the last client to connect.) ",
          "- port",
          "-- What port to run the self hosted server when WatchForMeeting.sharing.useServer is false. (Defaults to 8080)",
          "-- Ignored if WatchForMeeting.sharing.useServer is true.",
          "- serverURL",
          "-- The complete url for the external server. (including port)",
          "-- Required when WatchForMeeting.sharing.useServer is *true*",
          "- key",
          "-- UUID to identify the room. Value is provided when the room is added on the server side. ",
          "-- Required when WatchForMeeting.sharing.useServer is *true*",
          "- maxConnectionAttempts",
          "-- Maximum number of connection attempts when using an external server.",
          "- waitBeforeRetry",
          "-- Time, in seconds, between connection attempts when using an external server"
        ],
        "name" : "sharing",
        "doc" : "A Table containing the settings that control sharing.\n\n- enabled\n-- Whether or not sharing is enabled. True by default. When disabled, the spoon will still monitor meeting status, but you will need to write your own automations for what to do with that info. \n- useServer\n-- *true* - (recommended) an external server will store the meeting status and provide the web interface for monitoring meeting status. (Node.js sample server can be found at [https:\/\/github.com\/asp55\/MeetingStatusServer](https:\/\/github.com\/asp55\/MeetingStatusServer))\n-- *false* - hammerspoon will self serve the monitoring page. (Due to a limitation in hs.httpserver:websocket the monitoring page will only update in the last client to connect.) \n- port\n-- What port to run the self hosted server when WatchForMeeting.sharing.useServer is false. (Defaults to 8080)\n-- Ignored if WatchForMeeting.sharing.useServer is true.\n- serverURL\n-- The complete url for the external server. (including port)\n-- Required when WatchForMeeting.sharing.useServer is *true*\n- key\n-- UUID to identify the room. Value is provided when the room is added on the server side. \n-- Required when WatchForMeeting.sharing.useServer is *true*\n- maxConnectionAttempts\n-- Maximum number of connection attempts when using an external server.\n- waitBeforeRetry\n-- Time, in seconds, between connection attempts when using an external server",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.sharing",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "A Table containing the settings that control sharing.",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting.zoom",
        "stripped_doc" : [
          "(Read-only) The hs.application for zoom if it is running, otherwise nil"
        ],
        "name" : "zoom",
        "doc" : "(Read-only) The hs.application for zoom if it is running, otherwise nil",
        "notes" : [

        ],
        "signature" : "WatchForMeeting.zoom",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "(Read-only) The hs.application for zoom if it is running, otherwise nil",
        "parameters" : [

        ]
      },
      {
        "def" : "WatchForMeeting:auto()",
        "stripped_doc" : [
          "Monitors Zoom and updates status accordingly",
          ""
        ],
        "name" : "auto",
        "doc" : "Monitors Zoom and updates status accordingly\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:auto()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Monitors Zoom and updates status accordingly",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:fake()",
        "stripped_doc" : [
          "Disables monitoring and reports as being in a meeting. ",
          "Useful when meeting type is not supported (currently any platform that isn't zoom.)",
          ""
        ],
        "name" : "fake",
        "doc" : "Disables monitoring and reports as being in a meeting. \nUseful when meeting type is not supported (currently any platform that isn't zoom.)\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:fake()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Disables monitoring and reports as being in a meeting.",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:start()",
        "stripped_doc" : [
          "Restarts a WatchForMeeting object",
          ""
        ],
        "name" : "start",
        "doc" : "Restarts a WatchForMeeting object\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:start()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Restarts a WatchForMeeting object",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:start()",
        "stripped_doc" : [
          "Starts a WatchForMeeting object",
          ""
        ],
        "name" : "start",
        "doc" : "Starts a WatchForMeeting object\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:start()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Starts a WatchForMeeting object",
        "parameters" : [
          "- None",
          ""
        ]
      },
      {
        "def" : "WatchForMeeting:stop()",
        "stripped_doc" : [
          "Stops a WatchForMeeting object",
          ""
        ],
        "name" : "stop",
        "doc" : "Stops a WatchForMeeting object\n\nParameters:\n- None\n\nReturns:\n- The WatchForMeeting object",
        "notes" : [

        ],
        "signature" : "WatchForMeeting:stop()",
        "type" : "Method",
        "returns" : [
          "- The WatchForMeeting object"
        ],
        "desc" : "Stops a WatchForMeeting object",
        "parameters" : [
          "- None",
          ""
        ]
      }
    ],
    "doc" : "A module that monitors whether or not you are in a meeting and optionally shares that information on a webpage you can run elsewhere.",
    "name" : "WatchForMeeting"
  }
]